preview = true

exclude = []

select = [
    "F", # Pyflakes
    "E", # pycodestyle
    "W", # pycodestyle
    "C90", # mccabe
    "I", # isort
    "N", # pep8-naming
#    "D", # pydocstyle
    "UP", # pyupgrade
    "YTT", # flake8-2020
#    "ANN", # flake8-annotations
    "ASYNC", # flake8-async
    "S", # flake8-bandit
    "BLE", # flake8-blind-except
#    "FBT", # flake8-boolean-trap
    "B", # flake8-bugbear
    "A", # flake8-builtins
#    "COM", # flake8-commas
#    "CPY", # flake8-copyright
    "C4", # flake8-comprehensions
    "DTZ", # flake8-datetimez
    "T10", # flake8-debugger
    "DJ", # flake8-django
#    "EM", # flake8-errmsg
    "EXE", # flake8-executable
    "FA", # flake8-future-annotations
    "ISC", # flake8-implicit-str-concat
    "ICN", # flake8-import-conventions
    "G", # flake8-logging-format
#    "INP", # flake8-no-pep420
    "PIE", # flake8-pie
    "T20", # flake8-print
    "PYI", # flake8-pyi
    "PT", # flake8-pytest-style
    "Q", # flake8-quotes
    "RSE", # flake8-raise
    "RET", # flake8-return
    "SLF", # flake8-self
    "SLOT", # flake8-slots
    "SIM", # flake8-simplify
    "TID", # flake8-tidy-imports
    "TCH", # flake8-type-checking
    "INT", # flake8-gettext
#    "ARG", # flake8-unused-arguments
    "PTH", # flake8-use-pathlib
#    "TD", # flake8-todos
#    "FIX", # flake8-fixme
    "ERA", # eradicate
    "PD", # pandas-vet
#    "PGH", # pygrep-hooks
    "PL", # Pylint
    "TRY", # tryceratops
    "FLY", # flynt
#    "NPY", # NumPy-specific rules
#    "AIR", # Airflow
    "PERF", # Perflint
    "FURB", # refurb
    "LOG", # flake8-logging
    "RUF", # Ruff-specific rules
]

extend-ignore = [
    # False positive, don't remove
    "E203", # whitespace before ':'
    "E711", # comparison to None should be 'if cond is not None:'
    "E712", # ...
    "E713", # Test for membership should be `not in`
    "S101", # Use of `assert` detected
    "S320", # OK, we're using defusedxml
    # Fix these
    "A001", # Variable `...` is shadowing a python builtin
    "A002", # Argument `...` is shadowing a python builtin
    "A003", # Class attribute ... is shadowing a python builtin
    "A003", # Class attribute `...` is shadowing a python builtin
    "B024", # `...` is an abstract base class, but it has no abstract methods
    "B027", # `...` is an empty method in an abstract base class, but has no abstract decorator
    "B028", # No explicit `stacklevel` keyword argument found
    "B905", # `zip()` without an explicit `strict=` parameter
    "E402", # Module level import not at top of file
    "E501", # line too long
    "E741", # Ambiguous variable name
    "ERA001", # Found commented-out code
    "F401", # 'module' imported but unused
    "F841", # Local variable `...` is assigned to but never used
    "I001", # Import block is un-sorted or un-formatted
    "PLC0415", # `import` should be at the top-level of a file
    "PLR2004", # Magic value used in comparison
    "PLR6301", # Method could be a function, class method, or static method
    "RET504", # Unnecessary variable assignment before `return` statement
    "RET505", # Unnecessary `else` after `return` statement
    "RUF005", # Consider iterable unpacking instead of concatenation
    "RUF012", # Mutable class attributes should be annotated with `typing.ClassVar`
    "S104", # Possible binding to all interfaces
    "S301",
    "S603",
    "S605",
    "S606",
    "S607",
    "S701", # By default, jinja2 sets `autoescape` to `False`
    "SIM108", # Use ternary operator
    "T201", # `print` found
    "TCH001", # Move import into a type-checking block
    "TCH002", # Move import into a type-checking block
    "TCH003", # Move import into a type-checking block
    "TRY003", # Avoid specifying long messages outside the exception class
    "UP038", # Use `X | Y` in `isinstance` call instead of `(X, Y)`
    # More...
    "BLE001", # Do not catch blind exception
    "C901", # X is too complex
    "DTZ001", # The use of `datetime.datetime()` without `tzinfo` argument is not allowed
    "DTZ003", # The use of `datetime.datetime.utcnow()` is not allowed, use `datetime.datetime.now(tz=)` instead
    "DTZ004", # The use of `datetime.datetime.utcfromtimestamp()` is not allowed, use `datetime.datetime.fromtimestamp(ts, tz=)` instead
    "DTZ005", # The use of `datetime.datetime.now()` without `tz` argument is not allowed
    "DTZ007", # The use of `datetime.datetime.strptime()` without %z must be followed by `.replace(tzinfo=)` or `.astimezone()`
    "FLY002", # Consider `f"..."` instead of string join
    "FURB101", # `open` and `read` should be replaced by `Path(out_fn).read_bytes()`
    "FURB113", # Use `x.extend(...)` instead of repeatedly calling `x.append()`
    "FURB132",
    "FURB148", # `enumerate` index is unused, use `for x in y` instead
    "G001", # Logging statement uses `str.format`
    "G004", # Logging statement uses f-string
    "G201", # Logging `.exception(...)` should be used instead of `.error(..., exc_info=True)`
    "ISC001", # Implicitly concatenated string literals on one line
    "ISC003", # Explicitly concatenated string should be implicitly concatenated
    "N801", # Class name `timer` should use CapWords convention
    "N801", # Class name should use CapWords convention
    "N802", # Function name should be lowercase
    "N803", # Argument name should be lowercase
    "N804", # First argument of a class method should be named `cls`
    "N805", # First argument of a method should be named `self`
    "N806", # Variable in function should be lowercase
    "N814", # Camelcase ... imported as constant
    "N816", # Variable in global scope should not be mixedCase
    "N818", # Exception name should be named with an Error suffix
    "PD011", # Use `.to_numpy()` instead of `.values`
    "PERF102", # When using only the values of a dict use the `values()` method
    "PERF203", # `try`-`except` within a loop incurs performance overhead
    "PERF401", # Use a list comprehension to create a transformed list
    "PERF403", # Use a dictionary comprehension instead of a for-loop
    "PIE810", # Call `startswith` / `endswith` once with a `tuple`
    "PLC1901", # `x == ""` can be simplified to `not x` as an empty string is falsey
    "PLR0904", # Too many public methods (22 > 20)
    "PLR0911", # Too many return statements
    "PLR0912", # Too many branches
    "PLR0913", # Too many arguments in function definition
    "PLR0915", # Too many statements
    "PLR0917", # Too many positional arguments
    "PLR2044",
    "PLR0914",
    "PLR1706", # Consider using if-else expression
    "PLR5501", # Use `elif` instead of `else` then `if`, to reduce indentation
    "PLR6201", # Use a `set` literal when testing for membership
    "PLW0108", # Lambda may be unnecessary; consider inlining inner function
    "PLW1514", # `open` in text mode without explicit `encoding` argument
    "PLW2901", # `for` loop variable overwritten by assignment target
    "PLW3201", # Bad or misspelled dunder method name. (bad-dunder-name)
    "PT011", # `pytest.raises(ValueError)` is too broad, set the `match` parameter or use a more specific exception
    "PT012", # `pytest.raises()` block should contain a single simple statement
    "PT013", # Found incorrect import of pytest, use simple `import pytest` instead
    "PTH100", # `os.path.abspath()` should be replaced by `Path.resolve()`
    "PTH107", # `os.remove()` should be replaced by `Path.unlink()`
    "PTH109", # `os.getcwd()` should be replaced by `Path.cwd()`
    "PTH110", # `os.path.exists()` should be replaced by `Path.exists()`
    "PTH111", # `os.path.expanduser()` should be replaced by `Path.expanduser()`
    "PTH117", # `os.path.isabs()` should be replaced by `Path.is_absolute()`
    "PTH118", # `os.path.join()` should be replaced by `Path` with `/` operator
    "PTH119", # `os.path.basename()` should be replaced by `Path.name`
    "PTH120", # `os.path.dirname()` should be replaced by `Path.parent`
    "PTH122", # `os.path.splitext()` should be replaced by `Path.suffix`, `Path.stem`, and `Path.parent`
    "PTH123", # `open()` should be replaced by `Path.open()`
    "PTH202", # `os.path.getsize` should be replaced by `Path.stat().st_size`
    "PTH207", # Replace `glob` with `Path.glob` or `Path.rglob`
    "PYI024", # Use `typing.NamedTuple` instead of `collections.namedtuple`
    "PYI034", # `__enter__` methods in classes like `FormContext` usually return `self` at runtime
    "PYI036", # The first argument in `__exit__` should be annotated with `object` or `type[BaseException] | None`
    "RET503", # Missing explicit `return` at the end of function able to return non-`None` value
    "RET507", # Unnecessary `elif` after `continue` statement
    "RET508", # Unnecessary `else` after `break` statement
#    "RSE102", # Unnecessary parentheses on raised exception
    "SIM102", # Use a single `if` statement instead of nested `if` statements
    "SIM115", # Use context handler for opening files
    "SIM117", # Use a single `with` statement with multiple contexts instead of nested `with` statements
    "SIM118", # Use `key in dict` instead of `key in dict.keys()`
    "SLF001", # Private member accessed
    "TID252", # Relative imports from parent modules are banned
    "TRY002", # Create your own exception
    "TRY004", # Prefer `TypeError` exception for invalid type
    "TRY300", # Consider moving this statement to an `else` block
    "TRY400", # Use `logging.exception` instead of `logging.error`
    #
    "PLC2801", # Unnecessary dunder call
    # FIXME:
    "S403", # `pickle`, `cPickle`, `dill`, and `shelve` modules are possibly insecure
    "S404", # `subprocess` module is possibly insecure
    "S405", # lxml` is vulnerable to XML attacks
    "S410", # lxml` is vulnerable to XML attacks
]

[mccabe]
max-complexity = 10
